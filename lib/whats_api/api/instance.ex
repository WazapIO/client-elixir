# NOTE: This file is auto generated by OpenAPI Generator 6.2.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule WhatsAPI.Api.Instance do
  @moduledoc """
  API calls for all endpoints tagged `Instance`.
  """

  alias WhatsAPI.Connection
  import WhatsAPI.RequestBuilder

  @doc """
  Creates a new instance key.
  This endpoint is used to create a new WhatsApp Web instance.

  ### Parameters

  - `connection` (WhatsAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:instance_key` (String.t): Insert instance key if you want to provide custom key

  ### Returns

  - `{:ok, WhatsAPI.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_create_get(Tesla.Env.client, keyword()) :: {:ok, WhatsAPI.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_create_get(connection, opts \\ []) do
    optional_params = %{
      :instance_key => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/instances/create")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPI.Model.MainApiResponse{}},
      {400, %WhatsAPI.Model.MainApiResponse{}},
      {401, %WhatsAPI.Model.MainApiResponse{}},
      {404, %WhatsAPI.Model.MainApiResponse{}},
      {500, %WhatsAPI.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Get contacts.
  Fetches the list of contacts in the instance.

  ### Parameters

  - `connection` (WhatsAPI.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPI.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_contacts_get(Tesla.Env.client, String.t, keyword()) :: {:ok, WhatsAPI.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_contacts_get(connection, instance_key, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/instances/#{instance_key}/contacts")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPI.Model.MainApiResponse{}},
      {400, %WhatsAPI.Model.MainApiResponse{}},
      {401, %WhatsAPI.Model.MainApiResponse{}},
      {404, %WhatsAPI.Model.MainApiResponse{}},
      {500, %WhatsAPI.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Delete Instance.
  Deletes the instance with the provided key.

  ### Parameters

  - `connection` (WhatsAPI.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPI.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_delete_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, WhatsAPI.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_delete_delete(connection, instance_key, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/instances/#{instance_key}/delete")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPI.Model.MainApiResponse{}},
      {400, %WhatsAPI.Model.MainApiResponse{}},
      {401, %WhatsAPI.Model.MainApiResponse{}},
      {404, %WhatsAPI.Model.MainApiResponse{}},
      {500, %WhatsAPI.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Get Instance.
  Returns the instance data of single instance with connection status.

  ### Parameters

  - `connection` (WhatsAPI.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPI.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_get(Tesla.Env.client, String.t, keyword()) :: {:ok, WhatsAPI.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_get(connection, instance_key, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/instances/#{instance_key}/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPI.Model.MainApiResponse{}},
      {400, %WhatsAPI.Model.MainApiResponse{}},
      {401, %WhatsAPI.Model.MainApiResponse{}},
      {404, %WhatsAPI.Model.MainApiResponse{}},
      {500, %WhatsAPI.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Logout Instance.
  Logouts of the instance with the provided key.

  ### Parameters

  - `connection` (WhatsAPI.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPI.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_logout_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, WhatsAPI.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_logout_delete(connection, instance_key, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/instances/#{instance_key}/logout")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPI.Model.MainApiResponse{}},
      {400, %WhatsAPI.Model.MainApiResponse{}},
      {401, %WhatsAPI.Model.MainApiResponse{}},
      {404, %WhatsAPI.Model.MainApiResponse{}},
      {500, %WhatsAPI.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Get QrCode.
  Returns the qrcode in the base64 format.

  ### Parameters

  - `connection` (WhatsAPI.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPI.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_qrcode_get(Tesla.Env.client, String.t, keyword()) :: {:ok, WhatsAPI.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_qrcode_get(connection, instance_key, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/instances/#{instance_key}/qrcode")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPI.Model.MainApiResponse{}},
      {400, %WhatsAPI.Model.MainApiResponse{}},
      {401, %WhatsAPI.Model.MainApiResponse{}},
      {404, %WhatsAPI.Model.MainApiResponse{}},
      {500, %WhatsAPI.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Change Webhook url.
  Changes the webhook url of an instance.

  ### Parameters

  - `connection` (WhatsAPI.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `data` (StructsWebhookPayload): Message data
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPI.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_webhook_put(Tesla.Env.client, String.t, WhatsAPI.Model.StructsWebhookPayload.t, keyword()) :: {:ok, WhatsAPI.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_webhook_put(connection, instance_key, data, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/instances/#{instance_key}/webhook")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPI.Model.MainApiResponse{}},
      {400, %WhatsAPI.Model.MainApiResponse{}},
      {401, %WhatsAPI.Model.MainApiResponse{}},
      {404, %WhatsAPI.Model.MainApiResponse{}},
      {500, %WhatsAPI.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Get all instances.
  Fetches the list of all Instances with login status.

  ### Parameters

  - `connection` (WhatsAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPI.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_list_get(Tesla.Env.client, keyword()) :: {:ok, WhatsAPI.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_list_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/instances/list")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPI.Model.MainApiResponse{}},
      {400, %WhatsAPI.Model.MainApiResponse{}},
      {401, %WhatsAPI.Model.MainApiResponse{}},
      {404, %WhatsAPI.Model.MainApiResponse{}},
      {500, %WhatsAPI.Model.MainApiResponse{}}
    ])
  end
end
