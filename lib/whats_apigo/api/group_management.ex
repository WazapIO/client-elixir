# NOTE: This file is auto generated by OpenAPI Generator 6.2.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule WhatsAPIGo.Api.GroupManagement do
  @moduledoc """
  API calls for all endpoints tagged `GroupManagement`.
  """

  alias WhatsAPIGo.Connection
  import WhatsAPIGo.RequestBuilder

  @doc """
  Get admin groupss.
  Returns list of all groups in which you are admin.

  ### Parameters

  - `connection` (WhatsAPIGo.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPIGo.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_groups_admin_get(Tesla.Env.client, String.t, keyword()) :: {:ok, WhatsAPIGo.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_groups_admin_get(connection, instance_key, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/instances/#{instance_key}/groups/admin")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPIGo.Model.MainApiResponse{}},
      {400, %WhatsAPIGo.Model.MainApiResponse{}},
      {401, %WhatsAPIGo.Model.MainApiResponse{}},
      {404, %WhatsAPIGo.Model.MainApiResponse{}},
      {500, %WhatsAPIGo.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Create group.
  Creates a group with the participant data. The creator is automatically added to the group.

  ### Parameters

  - `connection` (WhatsAPIGo.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `data` (StructsGroupCreatePayload): Group create payload
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPIGo.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_groups_create_post(Tesla.Env.client, String.t, WhatsAPIGo.Model.StructsGroupCreatePayload.t, keyword()) :: {:ok, WhatsAPIGo.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_groups_create_post(connection, instance_key, data, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/instances/#{instance_key}/groups/create")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPIGo.Model.MainApiResponse{}},
      {400, %WhatsAPIGo.Model.MainApiResponse{}},
      {401, %WhatsAPIGo.Model.MainApiResponse{}},
      {404, %WhatsAPIGo.Model.MainApiResponse{}},
      {500, %WhatsAPIGo.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Get all groups.
  Returns list of all groups with participants data. Set include_participants to false to exclude participants data.

  ### Parameters

  - `connection` (WhatsAPIGo.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `opts` (keyword): Optional parameters
    - `:include_participants` (String.t): Include participants data

  ### Returns

  - `{:ok, WhatsAPIGo.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_groups_get(Tesla.Env.client, String.t, keyword()) :: {:ok, WhatsAPIGo.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_groups_get(connection, instance_key, opts \\ []) do
    optional_params = %{
      :include_participants => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/instances/#{instance_key}/groups/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPIGo.Model.MainApiResponse{}},
      {400, %WhatsAPIGo.Model.MainApiResponse{}},
      {401, %WhatsAPIGo.Model.MainApiResponse{}},
      {404, %WhatsAPIGo.Model.MainApiResponse{}},
      {500, %WhatsAPIGo.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Set group announce.
  Set if non-admins are allowed to send messages in groups

  ### Parameters

  - `connection` (WhatsAPIGo.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `announce` (boolean()): Announce status
  - `group_id` (String.t): Group id of the group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPIGo.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_groups_group_id_announce_put(Tesla.Env.client, String.t, boolean(), String.t, keyword()) :: {:ok, WhatsAPIGo.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_groups_group_id_announce_put(connection, instance_key, announce, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/instances/#{instance_key}/groups/#{group_id}/announce")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPIGo.Model.MainApiResponse{}},
      {400, %WhatsAPIGo.Model.MainApiResponse{}},
      {401, %WhatsAPIGo.Model.MainApiResponse{}},
      {404, %WhatsAPIGo.Model.MainApiResponse{}},
      {500, %WhatsAPIGo.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Leaves the group.
  Leaves the specified group.

  ### Parameters

  - `connection` (WhatsAPIGo.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `group_id` (String.t): Group id of the group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPIGo.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_groups_group_id_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, WhatsAPIGo.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_groups_group_id_delete(connection, instance_key, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/instances/#{instance_key}/groups/#{group_id}/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPIGo.Model.MainApiResponse{}},
      {400, %WhatsAPIGo.Model.MainApiResponse{}},
      {401, %WhatsAPIGo.Model.MainApiResponse{}},
      {404, %WhatsAPIGo.Model.MainApiResponse{}},
      {500, %WhatsAPIGo.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Set group description.
  Changes the group description

  ### Parameters

  - `connection` (WhatsAPIGo.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `group_id` (String.t): Group id of the group
  - `data` (StructsGroupUpdateDescriptionPayload): Group description data
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPIGo.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_groups_group_id_description_put(Tesla.Env.client, String.t, String.t, WhatsAPIGo.Model.StructsGroupUpdateDescriptionPayload.t, keyword()) :: {:ok, WhatsAPIGo.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_groups_group_id_description_put(connection, instance_key, group_id, data, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/instances/#{instance_key}/groups/#{group_id}/description")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPIGo.Model.MainApiResponse{}},
      {400, %WhatsAPIGo.Model.MainApiResponse{}},
      {401, %WhatsAPIGo.Model.MainApiResponse{}},
      {404, %WhatsAPIGo.Model.MainApiResponse{}},
      {500, %WhatsAPIGo.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Get group.
  Fetches the group data.

  ### Parameters

  - `connection` (WhatsAPIGo.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `group_id` (String.t): Group id of the group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPIGo.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_groups_group_id_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, WhatsAPIGo.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_groups_group_id_get(connection, instance_key, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/instances/#{instance_key}/groups/#{group_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPIGo.Model.MainApiResponse{}},
      {400, %WhatsAPIGo.Model.MainApiResponse{}},
      {401, %WhatsAPIGo.Model.MainApiResponse{}},
      {404, %WhatsAPIGo.Model.MainApiResponse{}},
      {500, %WhatsAPIGo.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Get group invite code.
  Gets the invite code of the group.

  ### Parameters

  - `connection` (WhatsAPIGo.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `group_id` (String.t): Group id of the group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPIGo.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_groups_group_id_invite_code_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, WhatsAPIGo.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_groups_group_id_invite_code_get(connection, instance_key, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/instances/#{instance_key}/groups/#{group_id}/invite-code")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPIGo.Model.MainApiResponse{}},
      {400, %WhatsAPIGo.Model.MainApiResponse{}},
      {401, %WhatsAPIGo.Model.MainApiResponse{}},
      {404, %WhatsAPIGo.Model.MainApiResponse{}},
      {500, %WhatsAPIGo.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Set group locked.
  Set if non-admins are allowed to change the group dp and other stuff

  ### Parameters

  - `connection` (WhatsAPIGo.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `locked` (boolean()): Locked status
  - `group_id` (String.t): Group id of the group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPIGo.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_groups_group_id_lock_put(Tesla.Env.client, String.t, boolean(), String.t, keyword()) :: {:ok, WhatsAPIGo.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_groups_group_id_lock_put(connection, instance_key, locked, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/instances/#{instance_key}/groups/#{group_id}/lock")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPIGo.Model.MainApiResponse{}},
      {400, %WhatsAPIGo.Model.MainApiResponse{}},
      {401, %WhatsAPIGo.Model.MainApiResponse{}},
      {404, %WhatsAPIGo.Model.MainApiResponse{}},
      {500, %WhatsAPIGo.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Set group name.
  Changes the group name. The max limit is 22 chars

  ### Parameters

  - `connection` (WhatsAPIGo.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `group_id` (String.t): Group id of the group
  - `data` (StructsGroupUpdateNamePayload): Group name data
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPIGo.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_groups_group_id_name_put(Tesla.Env.client, String.t, String.t, WhatsAPIGo.Model.StructsGroupUpdateNamePayload.t, keyword()) :: {:ok, WhatsAPIGo.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_groups_group_id_name_put(connection, instance_key, group_id, data, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/instances/#{instance_key}/groups/#{group_id}/name")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPIGo.Model.MainApiResponse{}},
      {400, %WhatsAPIGo.Model.MainApiResponse{}},
      {401, %WhatsAPIGo.Model.MainApiResponse{}},
      {404, %WhatsAPIGo.Model.MainApiResponse{}},
      {500, %WhatsAPIGo.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Add participant.
  Handles adding participants to a group. You must be admin in the group or the query will fail.

  ### Parameters

  - `connection` (WhatsAPIGo.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `group_id` (String.t): Group id of the group
  - `data` (StructsGroupUpdateParticipantsPayload): Group update payload
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPIGo.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_groups_group_id_participants_add_post(Tesla.Env.client, String.t, String.t, WhatsAPIGo.Model.StructsGroupUpdateParticipantsPayload.t, keyword()) :: {:ok, WhatsAPIGo.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_groups_group_id_participants_add_post(connection, instance_key, group_id, data, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/instances/#{instance_key}/groups/#{group_id}/participants/add")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPIGo.Model.MainApiResponse{}},
      {400, %WhatsAPIGo.Model.MainApiResponse{}},
      {401, %WhatsAPIGo.Model.MainApiResponse{}},
      {404, %WhatsAPIGo.Model.MainApiResponse{}},
      {500, %WhatsAPIGo.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Demote participant.
  Demotes admins in groups. You must be admin in the group or the query will fail.

  ### Parameters

  - `connection` (WhatsAPIGo.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `group_id` (String.t): Group id of the group
  - `data` (StructsGroupUpdateParticipantsPayload): Group update payload
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPIGo.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_groups_group_id_participants_demote_put(Tesla.Env.client, String.t, String.t, WhatsAPIGo.Model.StructsGroupUpdateParticipantsPayload.t, keyword()) :: {:ok, WhatsAPIGo.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_groups_group_id_participants_demote_put(connection, instance_key, group_id, data, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/instances/#{instance_key}/groups/#{group_id}/participants/demote")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPIGo.Model.MainApiResponse{}},
      {400, %WhatsAPIGo.Model.MainApiResponse{}},
      {401, %WhatsAPIGo.Model.MainApiResponse{}},
      {404, %WhatsAPIGo.Model.MainApiResponse{}},
      {500, %WhatsAPIGo.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Promote participant.
  Promotes participants to admin. You must be admin in the group or the query will fail.

  ### Parameters

  - `connection` (WhatsAPIGo.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `group_id` (String.t): Group id of the group
  - `data` (StructsGroupUpdateParticipantsPayload): Group update payload
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPIGo.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_groups_group_id_participants_promote_put(Tesla.Env.client, String.t, String.t, WhatsAPIGo.Model.StructsGroupUpdateParticipantsPayload.t, keyword()) :: {:ok, WhatsAPIGo.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_groups_group_id_participants_promote_put(connection, instance_key, group_id, data, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/instances/#{instance_key}/groups/#{group_id}/participants/promote")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPIGo.Model.MainApiResponse{}},
      {400, %WhatsAPIGo.Model.MainApiResponse{}},
      {401, %WhatsAPIGo.Model.MainApiResponse{}},
      {404, %WhatsAPIGo.Model.MainApiResponse{}},
      {500, %WhatsAPIGo.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Remove participant.
  Handles removing participants from a group. You must be admin in the group or the query will fail.

  ### Parameters

  - `connection` (WhatsAPIGo.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `group_id` (String.t): Group id of the group
  - `data` (StructsGroupUpdateParticipantsPayload): Group update payload
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPIGo.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_groups_group_id_participants_remove_delete(Tesla.Env.client, String.t, String.t, WhatsAPIGo.Model.StructsGroupUpdateParticipantsPayload.t, keyword()) :: {:ok, WhatsAPIGo.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_groups_group_id_participants_remove_delete(connection, instance_key, group_id, data, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/instances/#{instance_key}/groups/#{group_id}/participants/remove")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPIGo.Model.MainApiResponse{}},
      {400, %WhatsAPIGo.Model.MainApiResponse{}},
      {401, %WhatsAPIGo.Model.MainApiResponse{}},
      {404, %WhatsAPIGo.Model.MainApiResponse{}},
      {500, %WhatsAPIGo.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Set group picture.
  Changes the group profile picture. Currently it only seems to accept JPEG images only

  ### Parameters

  - `connection` (WhatsAPIGo.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `group_id` (String.t): Group id of the group
  - `instances_instance_key_groups_group_id_profile_pic_put_request` (InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPIGo.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_groups_group_id_profile_pic_put(Tesla.Env.client, String.t, String.t, WhatsAPIGo.Model.InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest.t, keyword()) :: {:ok, WhatsAPIGo.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_groups_group_id_profile_pic_put(connection, instance_key, group_id, instances_instance_key_groups_group_id_profile_pic_put_request, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/instances/#{instance_key}/groups/#{group_id}/profile-pic")
      |> add_param(:body, :body, instances_instance_key_groups_group_id_profile_pic_put_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPIGo.Model.MainApiResponse{}},
      {400, %WhatsAPIGo.Model.MainApiResponse{}},
      {401, %WhatsAPIGo.Model.MainApiResponse{}},
      {404, %WhatsAPIGo.Model.MainApiResponse{}},
      {500, %WhatsAPIGo.Model.MainApiResponse{}}
    ])
  end

  @doc """
  Get group from invite link.
  Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}

  ### Parameters

  - `connection` (WhatsAPIGo.Connection): Connection to server
  - `instance_key` (String.t): Instance key
  - `invite_link` (String.t): The invite link to check
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, WhatsAPIGo.Model.MainApiResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec instances_instance_key_groups_invite_info_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, WhatsAPIGo.Model.MainApiResponse.t} | {:error, Tesla.Env.t}
  def instances_instance_key_groups_invite_info_get(connection, instance_key, invite_link, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/instances/#{instance_key}/groups/invite-info")
      |> add_param(:query, :invite_link, invite_link)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %WhatsAPIGo.Model.MainApiResponse{}},
      {400, %WhatsAPIGo.Model.MainApiResponse{}},
      {401, %WhatsAPIGo.Model.MainApiResponse{}},
      {404, %WhatsAPIGo.Model.MainApiResponse{}},
      {500, %WhatsAPIGo.Model.MainApiResponse{}}
    ])
  end
end
